def cnot(const ctrl:B, tgt:B)mfree{
    if ctrl{
        tgt := X(tgt);
    }
    return tgt;
}

def H_n[n:!N](x:uint[n])mfree{
    for i in [0..n) { x[i] := H(x[i]); }
    return x;
}

// Need approx. e-values
def control_rot[n:!N, prec:!N](
    const eigen_qs:uint[prec],
    const approx: !N^(2^n), 
    const C:!R,
    anc:B)
    mfree
{
    for j in [0..2^n){
        if eigen_qs == approx[j]{
            anc := rotY(2 * asin(C * approx[j]/ 2^n), anc);
        }
    }

    return anc;
}

// Definition from Silq github
def qft[n:!ℕ](ψ: uint[n])mfree: uint[n]{
	for k in [0..n div 2){
		(ψ[k],ψ[n-k-1]) := (ψ[n-k-1],ψ[k]);
	}
	for k in [0..n){
		ψ[k] := H(ψ[k]);
		for l in [k+1..n){
			if ψ[l] && ψ[k]{
				phase(2*π * 2^(k-l-1));
			}
		}
	}
	return ψ;
}

// Variation of QPE loop body, where the control operation is encoded in hamU
def qpe_ham_loop[n:!N, prec:!N](
    const ctrl:uint[prec],
    const t:!R,
    const hamU: const B × const !R × const !R × uint[n] !->mfree uint[n],
    q:uint[n])
    mfree
{
    for i in [0..prec) { 
        // Better to encode 2^i in param then perform U 2^i times
        q := hamU(ctrl[i], i, t, q);
    }
    return q;
}

// Might not need
def qpe[k:!ℕ](
    U:uint[k] !->mfree uint[k],
    u:uint[k], 
    precision:!ℕ) {

    ancilla := 0:uint[precision];
    for i in [0..precision) { ancilla[i] := H(ancilla[i]); }

    for i in [0..precision) { 
        if ancilla[i] {
            for l in [0..2^i) {
                u := U(u);
            }
        }
    }

    ancilla := reverse(qft[precision])(ancilla);
    result := measure(ancilla);
    measure(u);
    return result;
}

def u3(const θ:!R, const φ:!R, const λv:!R, q:B)mfree{
    q := rotZ(λv - π/2, q);
    q := rotX(π/2, q);
    q := rotZ(π - θ, q);
    q := rotX(π/2, q);
    q := rotZ(φ - π/2, q);
    return q;
}
